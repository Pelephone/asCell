<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_package" deleted="false" description="创建类" enabled="true" id="com.adobe.flexide.as.core.codetemplates.class" name="class">/**&#13;
 * @author ${user}&#13;
 */&#13;
${specifier:values(public, private, protected)} class ${enclosing_type}&#13;
{&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="为类创建构造函数" enabled="true" id="com.adobe.flexide.as.core.codetemplates.constructor" name="constructor">public function ${enclosing_type}() &#13;
{&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="发消息字符" enabled="true" name="creq">		public static const MSGNO:int = ${field};&#13;
		&#13;
		public function ${enclosing_type}()&#13;
		{&#13;
			super(MSGNO);&#13;
		}&#13;
&#13;
		&#13;
		/**&#13;
		 * @inheritDoc &#13;
		 */		&#13;
		override public function get msgData():MessageData&#13;
		{&#13;
			var msg:MessageData = super.msgData;&#13;
			return msg;&#13;
		}&#13;
		&#13;
		&#13;
		/**&#13;
		 * @inheritDoc &#13;
		 */		&#13;
		override public function set msgData(value:MessageData):void&#13;
		{&#13;
		&#13;
		}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="创建 do-while 循环" enabled="true" id="com.adobe.flexide.as.core.codetemplates.do" name="do">do &#13;
{&#13;
	${line_selection}${cursor}&#13;
} while(${condition:local_var(Boolean)});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="为自定义事件类创建主体" enabled="true" id="com.adobe.flexide.as.core.codetemplates.eventBody" name="event body">public static const ${type_const}:String = "${type_const_value}";

public function ${enclosing_type}(type:String, ${cursor}bubbles:Boolean = ${bubbles:values(false,true)}, cancelable:Boolean = ${cancel:values(false,true)})
{
	super(type, bubbles, cancelable);
}
override public function clone():Event
{
	return new ${enclosing_type}(type, bubbles, cancelable);
}
override public function toString():String
{
	return formatToString("${enclosing_type}", "type", "bubbles", "cancelable",
	"eventPhase");
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="事件方法" enabled="true" name="evtfun">${specifier:values(private, public, protected, '')} function on${enclosing_method}(e:${evt:values(Event, MouseEvent)}):void&#13;
{&#13;
	${line_selection}${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="便利容器里面的所有对象" enabled="true" name="fordsp">for (var ${index}:int = 0; ${index} &lt; ${dspc}.numChildren; ${index}++) &#13;
{&#13;
	var ${itemDsp}:${DisplayObject} = ${dspc}.getChildAt(${index}) as ${DisplayObject};&#13;
	${line_selection}${cursor}&#13;
				&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="使用枚举对数组的值进行迭代" enabled="true" id="com.adobe.flexide.as.core.codetemplates.fore" name="fore">var ${item}:${specifier:values(Object,int, String)};&#13;
for each (${item} in ${array}) &#13;
{&#13;
	${line_selection}${cursor}&#13;
}
</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="迭代数组" enabled="true" id="com.adobe.flexide.as.core.codetemplates.fori" name="fori">for (var ${index}:int = 0; ${index} &lt; ${array}.length; ${index}++) &#13;
{&#13;
	${line_selection}${cursor}&#13;
}
</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="迭代数组2" enabled="true" name="fori">for (var ${index}:int = 0; ${index} &lt; ${array}.length; ${index}++) &#13;
{&#13;
	var ${itm}:${Object} = ${array}[${index}] as ${Object};&#13;
	${line_selection}${cursor}&#13;
}&#13;
</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="遍历哈希数据" enabled="true" name="forin">for (var ${oName}:${String} in ${var}) &#13;
{&#13;
	var ${vo}:${Object} = ${var}[${oName}] as ${Object};&#13;
	${line_selection}${cursor}&#13;
}&#13;
</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="创建函数" enabled="true" id="com.adobe.flexide.as.core.codetemplates.function" name="function">${specifier:values(private, public, protected)} function ${fname}():${type:values(void,String,Number,Boolean,Object)}
{
	${line_selection}${cursor}
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="创建获取方法" enabled="true" name="getFun">/**&#13;
 * 获取${desc}&#13;
 */&#13;
${specifier:values(public, private, protected)} function get${fun}(${arg}:${Type:values(int,String)}):${Object}&#13;
{&#13;
	return ${Object};&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="新建单例" enabled="true" name="getIns">{&#13;
	if(instance)&#13;
		throw new Error("${enclosing_type} is singleton class and allready exists!");&#13;
		&#13;
	instance = this;&#13;
}&#13;
&#13;
/**&#13;
 * 单例&#13;
 */&#13;
private static var instance:${enclosing_type};&#13;
/**&#13;
 * 获取单例&#13;
 */&#13;
public static function getInstance():${enclosing_type}&#13;
{&#13;
	if(!instance)&#13;
		instance = new ${enclosing_type}();&#13;
	&#13;
	return instance;&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="获取映射单例" enabled="true" name="getIns2">{&#13;
	if(facade.hasSinglenOf(${enclosing_type}))&#13;
		throw new Error(this + " is singleton class and allready exists!");&#13;
	&#13;
	&#13;
	facade.mapSinglen(this);&#13;
}&#13;
&#13;
/**&#13;
 * 获取单例&#13;
 */&#13;
public static function getInstance():${enclosing_type}&#13;
{&#13;
	return Facade.getInstance().getSinglenOf(${enclosing_type});&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="生成单例" enabled="true" name="getIns3">		//---------------------------------------------------&#13;
		// 单例&#13;
		//---------------------------------------------------&#13;
		&#13;
		/**&#13;
		 * 获取单例&#13;
		 */&#13;
		public static function getInstance():${enclosing_type}&#13;
		{&#13;
			return SinglenMgr.getInstance().getSinglenOf(${enclosing_type});&#13;
		}&#13;
		&#13;
		public function ${enclosing_type}()&#13;
		{&#13;
			super();&#13;
			var singlenMgr:SinglenMgr = SinglenMgr.getInstance();&#13;
			if(singlenMgr.hasSinglenOf(${enclosing_type}))&#13;
				throw new Error(this + " is singleton class and allready exists!");&#13;
			&#13;
			singlenMgr.mapSinglen(this);&#13;
		}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="创建 getter 函数" enabled="true" id="com.adobe.flexide.as.core.codetemplates.getter" name="getter">${specifier:values(public, private, protected)} function get ${property}():${Type:values(String,Number,Boolean)} &#13;
{&#13;
	${cursor}&#13;
	return ${Type};&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="获取模块单例" enabled="true" name="getThis">/**&#13;
 * 获取单例&#13;
 */&#13;
public static function getInstance():${enclosing_type}&#13;
{&#13;
	return GameFacade.getInstance().getMapSinglen(${enclosing_type});&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="创建具有参数对象的 HTTPService 调用" enabled="true" id="com.adobe.flexide.as.core.codetemplates.HTTPService" name="HTTPService">${:import(mx.rpc.http.HTTPService,mx.rpc.events.ResultEvent,mx.rpc.events.FaultEvent)}
var ${service}:HTTPService = new HTTPService();
${service}.addEventListener(ResultEvent.RESULT,${onResult});
${service}.addEventListener(FaultEvent.FAULT,${onFault});
${service}.destination = "${destination}";
${service}.resultFormat = "${resultFormat:values(object,array,xml,e4x,flashvars,text)}";
var ${parms}:Object = {};
${parms}["${parm1}"] = "${parm}";
${service}.send(${parms});
${service}.showBusyCursor = ${bool:values(true,false)}; 
${cursor}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="创建 if 语句" enabled="true" id="com.adobe.flexide.as.core.codetemplates.if" name="if">if (${condition:local_var(Boolean)}) &#13;
{&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="创建 if else if 代码块" enabled="true" id="com.adobe.flexide.as.core.codetemplates.ifElseIf" name="if else if">if (${condition1:local_var(Boolean)}) 
{
	${cursor}
}
else if (${condition2:local_var(Boolean)}) 
{
	
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="调试文本" enabled="true" name="logDebug">	CONFIG::debug&#13;
	{&#13;
		import org.as3commons.logging.ILogger;&#13;
		import org.as3commons.logging.LoggerFactory;&#13;
	}&#13;
	&#13;
	CONFIG::debug&#13;
	{&#13;
		/**&#13;
		 * 日志&#13;
		 */&#13;
		private static var logger:ILogger = LoggerFactory.getClassLogger(${class_name});&#13;
	}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="基本模板类" enabled="true" name="mvcNew">public static const NAME:String = "${enclosing_type}";&#13;
&#13;
public function ${enclosing_type}()&#13;
{&#13;
	super(NAME);&#13;
}&#13;
&#13;
// 通过工厂获取全局单例&#13;
public static function getInstance():${enclosing_type}&#13;
{&#13;
	return GameFacade.getInstance().getMapSinglen(${enclosing_type});&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="导入包，导完后再ctrl+shift+o清理一次" enabled="true" name="myImport">import flash.display.SimpleButton;&#13;
import flash.display.Sprite;&#13;
import flash.events.MouseEvent;&#13;
import com.hudoop.game.components.buttons.BlueButton;&#13;
import flash.text.TextField;&#13;
import com.hudoop.game.components.CustomTextField;&#13;
import utils.tools.DispTool;&#13;
import flash.display.DisplayObject;&#13;
import flash.display.MovieClip;&#13;
import utils.tools.StringTool;&#13;
import flash.geom.Matrix;&#13;
import flash.geom.Transform;&#13;
import flash.text.TextField;&#13;
import flash.text.TextFormat;&#13;
import com.hudoop.skins.DefaultSkinConfig;&#13;
import com.hudoop.common.interfaces.IRecycle;&#13;
import com.hudoop.common.utils.Reflection;&#13;
import com.hudoop.components.supportClasses.ItemRenderer;&#13;
import com.hudoop.game.components.ResImage;&#13;
import com.hudoop.game.components.buttons.GreenButton;&#13;
import com.hudoop.game.components.buttons.RedButton;&#13;
import com.hudoop.components.List;&#13;
import flash.text.TextFormat;&#13;
import flash.text.TextFormatAlign;&#13;
import com.hudoop.components.supportClasses.ListBase;</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="创建解析xml类" enabled="true" name="newCfg">&#13;
		public function ${enclosing_type}()&#13;
		{&#13;
			super();&#13;
			if (instance != null)&#13;
			{&#13;
				throw new Error("${enclosing_type} is single instance");&#13;
			}&#13;
			instance = this;&#13;
		}&#13;
		&#13;
		/**&#13;
		 * 单例&#13;
		 */&#13;
		private static var instance:${enclosing_type};&#13;
		/**&#13;
		 * 获取单例&#13;
		 */&#13;
		public static function getInstance():${enclosing_type}&#13;
		{&#13;
			if(!instance)&#13;
				instance = new ${enclosing_type}();&#13;
			&#13;
			return instance;&#13;
		}&#13;
		&#13;
		/**&#13;
		 * 获得需要打包的xml地址数组&#13;
		 * @return&#13;
		 *&#13;
		 */&#13;
		override public function get configXmlUrl():Array&#13;
		{&#13;
			return ["${enclosing_type}.xml"]&#13;
		}&#13;
		&#13;
		/**&#13;
		 * 获得数据配置的索引(可用类名作为key)&#13;
		 * @return&#13;
		 */&#13;
		override public function get configKey():String&#13;
		{&#13;
			return "${enclosing_type}";&#13;
		}&#13;
		&#13;
		CONFIG::zip // 下面的函数只在zip模式下执行&#13;
		{&#13;
			/**&#13;
			 * 解析xml&#13;
			 */&#13;
			override public function parseConfig(xml:XML):Dictionary&#13;
			{&#13;
				var ss:* = ParseMgr.getInstance().fromXMl(xml);&#13;
				dictionary["${arrname}"] = ss;&#13;
				return dictionary;&#13;
			}&#13;
		}&#13;
		&#13;
		/**&#13;
		 * 获得数据数组&#13;
		 * @return&#13;
		 */&#13;
		public function get ${arrname}Ls():Array&#13;
		{&#13;
			return dictionary["${arrname}"];&#13;
		}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="新建实体解析" enabled="true" name="newEntity">		&#13;
		override public function registerClasses():void&#13;
		{&#13;
			parseMgr.regClz(${field}VO,"${field}");&#13;
		}&#13;
		&#13;
		override public function parseData(data:*):*&#13;
		{&#13;
			return parseMgr.fromXMl(data);&#13;
		}&#13;
		&#13;
		override public function get keyName():String&#13;
		{&#13;
			return EntityKeys.${field};&#13;
		}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="新建临时对象" enabled="true" name="newobj">var ${oname}:${obj} = new ${obj}();</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="覆盖方法" enabled="true" name="opf">/**&#13;
 * @inheritDoc&#13;
 */&#13;
override ${specifier:values(public, protected, private)} function ${fname}&#13;
{&#13;
	supf${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="创建包" enabled="true" id="com.adobe.flexide.as.core.codetemplates.package" name="package">package ${enclosing_package}&#13;
{&#13;
	/**&#13;
 	 * @author ${user}&#13;
 	 */&#13;
	public class ${enclosing_type}&#13;
	{&#13;
		public function ${enclosing_type}()&#13;
		{&#13;
			${cursor}&#13;
		}&#13;
	}	&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="创建属性，包括变量定义、Getter 和 Setter 方法" enabled="true" id="com.adobe.flexide.as.core.codetemplates.property" name="property">private var _${name}:${Type};
public function get ${name}():${Type} { return _${name}; }

public function set ${name}(${value}:${Type}):void
{
	if (_${name} == ${value})
		return;
	_${name} = value;
}
${cursor}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="创建静态常量" enabled="true" name="psc">/** **/&#13;
${specifier:values(public, protected, private)} static const ${fname}:${type:values(int, String, Array)} = ${val};</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="生成属性静态名" enabled="true" name="psca">/**&#13;
 * ${fname} 属性名&#13;
 */&#13;
${specifier:values(public, protected, private)} static const ATTR_${fname}:String = "${fname}";</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="创建事件静态函数" enabled="true" name="psce">/** ${desc} */&#13;
[Event(name="${val}", type="${enclosing_package_and_type}")]&#13;
/**&#13;
 * ${desc}&#13;
 */&#13;
public static const ${val}:String = "${val}";&#13;
&#13;
dispatchEvent(new ${enclosing_type}(${enclosing_type}.${val}));&#13;
&#13;
addEventListener(${enclosing_type}.${val},${val}Handler);&#13;
/**&#13;
 * ${desc}&#13;
 * @param e&#13;
 */&#13;
private function ${val}Handler(e:${enclosing_type}):void&#13;
{&#13;
			&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="新建立事件" enabled="true" name="psce">/** ${desc} */&#13;
[Event(name="${val}", type="${enclosing_package_and_type}")]&#13;
/** ${desc} */&#13;
public static const ${val}:String = "${val}";&#13;
&#13;
sendModelNote(${enclosing_type}.${val});&#13;
&#13;
addEventListener(${enclosing_type}.${val},on_${val});&#13;
/**&#13;
 * ${desc}&#13;
 * @param e&#13;
 */&#13;
private function on_${val}(e:ParamEvent=null):void&#13;
{&#13;
	&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="创建静态字符串" enabled="true" name="pscs">/**  **/&#13;
${specifier:values(public, protected, private)} static const ${val}:String = "${val}";</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="创建静态函数" enabled="true" name="psf">${specifier:values(public, protected, private)} static function ${fname}():${type:values(void, int, String, Array)}&#13;
{&#13;
	${line_selection}${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="生成静态变量" enabled="true" name="psv">${specifier:values(public, protected, private)} static var ${fname}:${type:values(int, String, Array)} = ${val};</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="新建语言包方法" enabled="true" name="psvf">public static var ${langName}:String = "${Str}";&#13;
		&#13;
public static function ${langName}Ary(...parameters):String&#13;
{&#13;
	return StringUtil.replaceByArgs(${langName}, parameters)&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="注册别名生成" enabled="true" name="regName">registerClassAlias("${enclosing_package_and_type}",${enclosing_type});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="创建 RemoteObject " enabled="true" id="com.adobe.flexide.as.core.codetemplates.remoteObject" name="RemoteObject">${:import(mx.rpc.remoting.RemoteObject,mx.rpc.remoting.Operation,mx.rpc.events.ResultEvent,mx.rpc.events.FaultEvent)}
${ro:var(mx.rpc.remoting.RemoteObject)} = new RemoteObject();
${ro}.destination = "${myService}";
${ro}.addEventListener(FaultEvent.FAULT,${onFault});
				
var ${op}:Operation = new Operation(${ro}, "${myOperation}");  
${op}.addEventListener(ResultEvent.RESULT, ${onOpResult});
${op}.addEventListener(FaultEvent.FAULT,${onOpFault});
${cursor}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="创建具有 ColdFusion 端点的 RemoteObject " enabled="true" id="com.adobe.flexide.as.core.codetemplates.remoteObjectCF" name="RemoteObject with CF Endpoint">${:import(mx.rpc.remoting.RemoteObject,mx.rpc.remoting.Operation,mx.rpc.events.ResultEvent,mx.rpc.events.FaultEvent)}
${ro:var(mx.rpc.remoting.RemoteObject)} = new RemoteObject();
${ro}.endpoint="${endpoint:values('http://localhost:8500/flex2gateway')}";				
${ro}.source = "${myCFservice}";
${ro}.destination = "ColdFusion";
${ro}.addEventListener(FaultEvent.FAULT, ${onFault});
				
var ${op}:Operation = new Operation(${ro}, "${myOperation}");  
${op}.addEventListener(ResultEvent.RESULT, ${onOpResult});
${op}.addEventListener(FaultEvent.FAULT, ${onOpFault});
${cursor}
</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="创建具有 Java 端点的 RemoteObject " enabled="true" id="com.adobe.flexide.as.core.codetemplates.remoteObjectJava" name="RemoteObject with Java Endpoint ">${:import(mx.rpc.remoting.RemoteObject,mx.rpc.remoting.Operation,mx.rpc.events.ResultEvent,mx.rpc.events.FaultEvent)}
${ro:var(mx.rpc.remoting.RemoteObject)} = new RemoteObject();
${ro}.endpoint="${endpoint:values('http://localhost:8080/mywebapp/messagebroker/amf')}";
${ro}.destination = "${myService}";
${ro}.addEventListener(FaultEvent.FAULT,${onFault});
				
var ${op}:Operation = new Operation(${ro}, "${myOperation}");  
${op}.addEventListener(ResultEvent.RESULT,${onOpResult});
${op}.addEventListener(FaultEvent.FAULT,${onOpFault});
${cursor}
</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="创建具有 PHP 端点的 RemoteObject " enabled="true" id="com.adobe.flexide.as.core.codetemplates.remoteObjectPHP" name="RemoteObject with PHP endpoint">${:import(mx.rpc.remoting.RemoteObject,mx.rpc.remoting.Operation,mx.rpc.events.ResultEvent,mx.rpc.events.FaultEvent)}
${ro:var(mx.rpc.remoting.RemoteObject)} = new RemoteObject();
${ro}.endpoint = "${endpoint:values('http://localhost/amfphp/gateway.php')}";
${ro}.source = "${myPHPservice}";
${ro}.destination = "amfphp";
${ro}.addEventListener(FaultEvent.FAULT,${onFault});

var ${op}:Operation = new Operation(${ro}, "${myOperation}");  
${op}.addEventListener(ResultEvent.RESULT, ${onOpResult});
${op}.addEventListener(FaultEvent.FAULT, ${onOpFault});
${cursor}
</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="此方法可以移除此匿名函数作为监听函数的事件监听" enabled="true" name="removeEvt">${enclosing_method_arguments}.currentTarget.removeEventListener(${enclosing_method_arguments}.type, ${enclosing_method});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="发送属性改变" enabled="true" name="sendAttrChange">if(${field} == value)&#13;
	return;&#13;
var oldVal:int = ${field};&#13;
${field} = value;&#13;
sendPropertyChange(ATTR${field},value,oldVal);&#13;
&#13;
&#13;
&#13;
public static const ATTR${field}:String = "${field}";</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="发事件" enabled="true" name="sendEvent">${specifier:values(dispatchEvent, dispatchRootEvent)}(new ${Event}(${Event}.${note}));</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="带更新事件的set" enabled="true" name="setEvt">	if(${property} is ${vo})&#13;
		(${property} as ${vo}).removeEventListener(${evtType},${funName});&#13;
	&#13;
	${property} = ${value};&#13;
	&#13;
	if(${property} is ${vo})&#13;
		(${property} as ${vo}).addEventListener(${evtType},${funName});${cursor}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="创建 setter 函数" enabled="true" id="com.adobe.flexide.as.core.codetemplates.setter" name="setter">${specifier:values(public, protected, private)} function set ${property}(${value}:${Type:values(String,Number,Boolean)}):void &#13;
{&#13;
	_${property} = ${value};${cursor}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="间隔注释" enabled="true" name="spac//">//---------------------------------------------------&#13;
// ${desc}&#13;
//---------------------------------------------------&#13;
${cursor}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="添加舞台监听" enabled="true" name="stageEvt">StageMgr.getInstance().registerResizeListener(onStageResize);&#13;
		&#13;
		/**&#13;
		 * 舞台改变&#13;
		 * @param e&#13;
		 */&#13;
		private function onStageResize():void&#13;
		{&#13;
			StageMgr.stageHeight;&#13;
			StageMgr.stageWidth;&#13;
		}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="继承方法" enabled="true" name="supf">super.${enclosing_method}(${enclosing_method_arguments});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="创建切换块" enabled="true" id="com.adobe.flexide.as.core.codetemplates.switch" name="switch">switch(${expression})&#13;
{&#13;
	case ${result}:&#13;
	{&#13;
		${cursor}&#13;
		break;&#13;
	}&#13;
	&#13;
	default:&#13;
	{&#13;
		break;&#13;
	}&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_type_members" deleted="false" description="创建 toString 函数" enabled="true" id="com.adobe.flexide.as.core.codetemplates.toString" name="toString">override public function toString() : String &#13;
{&#13;
	return "${enclosing_package_and_type}";&#13;
}&#13;
${cursor}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="跟踪当前方法" enabled="true" id="com.adobe.flexide.as.core.codetemplates.traceMethod" name="trace current method">trace("${enclosing_type}.${enclosing_method}(${enclosing_method_arguments})");&#13;
${cursor}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="调试模式输出" enabled="true" name="traceDebug">CONFIG::debug{&#13;
	Log.debug("${cursor}");&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script_statement" deleted="false" description="创建 try/catch 块" enabled="true" id="com.adobe.flexide.as.core.codetemplates.tryCatch" name="try/catch">try&#13;
{&#13;
	${line_selection}${cursor}&#13;
} &#13;
catch(${error}:${Error}) &#13;
{&#13;
	&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="计算用时" enabled="true" name="useTime">var startTime:int = getTimer();&#13;
trace("${enclosing_type}.${enclosing_method} 方法计算用时",getTimer()-startTime,"毫秒");</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="创建新显示对象" enabled="true" name="varDsp">${type1:values(private, public, protected)} var ${dsp}:${type:values(MyTextField, Sprite, TextField, List)};&#13;
${dsp} = ${new} ${type:values(MyTextField, Sprite, TextField, List)}();&#13;
${dsp}.name = "${dsp}";&#13;
${this}.addChild(${dsp});</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="获取界面元素生成变量" enabled="true" name="varDspGet">private var ${varName}:${Sprite};&#13;
${varName} = view.getChildByName("${varName}") as ${Sprite};</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="生成单例变量" enabled="true" name="varIns">var ${varname}:${className} = ${className}.getInstance();</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="新建哈希数据对象，和相关方法" enabled="true" name="varMap">/**&#13;
 * ${testName}哈希数据 &lt;${keyType:values(String, int)},VO&gt;&#13;
 */&#13;
${specifier:values(private, protected, public)} var a${hmName}Map:Object = {};&#13;
		&#13;
/**&#13;
 * 设置添加哈希数据&#13;
 */&#13;
${specifier2:values(public, protected, private)} function set${hmName}ById(${key}:${keyType:values(String, int)},obj:${Object}):void&#13;
{&#13;
	a${hmName}Map[${key}] = obj;&#13;
}&#13;
&#13;
/**&#13;
 * 通过键获取哈希数据&#13;
 */&#13;
${specifier2:values(public, protected, private)} function get${hmName}ById(${key}:${keyType:values(String, int)}):${Object}&#13;
{&#13;
	return a${hmName}Map[${key}] as ${Object};&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="新建变量" enabled="true" name="varnew">${specifier:values(public, protected , private)} var ${vname}:${type:values(int, String, Object)};</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="新建立setter变量" enabled="true" name="varSet">/** ${desc} */&#13;
private var _${varName}:${specifier:values(int, String , Object)};&#13;
&#13;
/**&#13;
 * ${desc}&#13;
 */&#13;
public function get ${varName}():${specifier:values(int, String , Object)}&#13;
{&#13;
	return _${varName};&#13;
}&#13;
&#13;
/**&#13;
 * @private &#13;
 */&#13;
public function set ${varName}(value:${specifier:values(int, String , Object)}):void&#13;
{&#13;
	if(_${varName} == value)&#13;
		return;&#13;
	_${varName} = value;&#13;
}</template><template autoinsert="true" context="com.adobe.flexide.as.core.codetemplates.action_script" deleted="false" description="创建具有类型的 Vector 实例" enabled="true" id="com.adobe.flexide.as.core.codetemplates.vector" name="vector">var ${name}:Vector.&lt;${type}&gt; = new Vector.&lt;${type}&gt;();&#13;
${cursor}</template></templates>