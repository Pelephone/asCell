/** Copyright(c) 2011 the original author or authors.** Licensed under the Apache License, Version 2.0 (the "License");* you may not use this file except in compliance with the License.* You may obtain a copy of the License at**     http://www.apache.org/licenses/LICENSE-2.0** Unless required by applicable law or agreed to in writing, software* distributed under the License is distributed on an "AS IS" BASIS,* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,* either express or implied. See the License for the specific language* governing permissions and limitations under the License.*/package netSocket{	import flash.utils.ByteArray;
	
	import netSocket.interfaces.IMessage;
	/**	 * 消息数据结构	 * 功能:<br>	 * 如果是接收消息，本类负责将接收到的二进制数据流，解码成有用的部分，消息头，消息体，并可以获取消息号等信息<br>	 * 如果是发送消息，本类将消息编码成服务器端需要的格式	 *	 * @author Michael.Huang	 *	 */	public class MessageData implements IMessage	{		/**		 * 头部的字节长度(4个int)		 */		public static const HEAD_LEN:int = 4;		/**		 * @param data:*	如果是发送消息，则使用消息号，如果是接收消息，则是二进制流		 * <pre>		 * 如果是消息号，则后面还应有几个参数，场景id，用户id		 * 如var msg:MessageData = new MessageData(bytes)		 * var msg:MessageData = new MessageData(messageNo,sceneId,userId);		 * </pre>		 */		public function MessageData(data:*, ... vArgs)		{			if (data is ByteArray)			{				setBytes(ByteArray(data));			}			else if (int(data) > 0)			{				_msgId = int(data);				setMsgHead();			}		}		private var _msgId:int = 0; //消息号		private var _sceneId:int = 0; //场景ID		private var _userId:int = 0; //用户ID		private var _head:ByteArray; //头部，定义固定的消息头，比如消息号，比如用户id等		private var _body:ByteArray; //消息体，定义其他数据		/**		 * 将接收到的二进制流转换成消息结构		 */		private function setBytes(ba:ByteArray):void		{			ba.position = 0;			if (ba.bytesAvailable >= HEAD_LEN)			{				_head = MessgeUtil.createByteArray();				ba.readBytes(_head, 0, HEAD_LEN);			}			if (_head.length == 4 && ba.bytesAvailable > 0)			{				_body = MessgeUtil.createByteArray();				ba.readBytes(_body, 0, ba.bytesAvailable);			}			try			{				ba.clear();			}			catch (e:Error)			{				//do nothing			}			ba = null;			//消息号			_head.position = 0;			_msgId = _head.readUnsignedShort();		}		/**		 * 设置消息头部		 */		private function setMsgHead():void		{			_head = MessgeUtil.createByteArray();			_body = MessgeUtil.createByteArray();			if (_msgId > 0)			{				_head.writeShort(_msgId);				_head.writeShort(ServerInfo.GS_INDEX);			}		}		/**		 * 消息号		 */		public function get msgId():int		{			return _msgId;		}		/**		 * 消息头部二进制		 */		public function get head():ByteArray		{			return _head;		}		/**		 * 消息体二进制		 */		public function get body():ByteArray		{			return _body;		}		/**		 * body 数组位置		 */		public function get position():int		{			return _body.bytesAvailable;		}		/**		 * 开始读取数据，将指针位置置0		 */		public function startReadData():void		{			_body.position = 0;		}		/**		 * 将头数据Head跟Body数据放到一个包里面		 */		public function get msgData():ByteArray		{			var ba:ByteArray = MessgeUtil.createByteArray();			if (_head != null)				ba.writeBytes(_head, 0, _head.length);			if (_body != null)				ba.writeBytes(_body, 0, _body.length);			return ba;		}		/**		 * 清理数据		 */		public function clear():void		{			try			{				_body.position = 0;				_body.length = 0;				_head.position = 0;				_head.length = 0;			}			catch (e:Error)			{				//do nothing			}		}		//-------------------------------------------------		// write methods		//-------------------------------------------------		/**		 * double双精度浮点数		 */		public function writeDouble(data:Number):void		{			_body.writeDouble(data);		}		/**		 * 32位整型		 */		public function writeInt32(data:int):void		{			_body.writeInt(data);		}		/**		 * 64位整型		 */		public function writeInt64(data:int):void		{			MessgeUtil.write64Int(_body, data);		}		/**		 * unsignedInt无符号整型		 */		public function writeUnsignedInt(data:uint):void		{			_body.writeUnsignedInt(data);		}		/**		 * float单精度浮点型		 */		public function writeFloat(data:Number):void		{			_body.writeFloat(data);		}		/**		 * byte写入一个字节		 */		public function writeByte(data:int):void		{			_body.writeByte(data);		}		/**		 * short写入一个短整型16位		 */		public function writeShort(data:int):void		{			_body.writeShort(data);		}		/**		 * bytes写入一个字节流		 */		public function writeBytes(data:ByteArray, offset:uint = 0, length:uint = 0):void		{			_body.writeBytes(data, offset, length);		}		/**		 * string写入一个字符串		 */		public function writeUTF(data:String):void		{			MessgeUtil.writeUTF(_body, data);		}		/**		 * char[]写入一个定长字串		 */		public function writeChar(data:String, len:uint = 1):void		{			if (len <= 0)				return;			if (len == 1)			{				_body.writeByte(data.charCodeAt(0));				return;			}			var by:ByteArray = MessgeUtil.addCharsToBytes(data, len);			_body.writeBytes(by);		}		//-------------------------------------------------		// read methods		//-------------------------------------------------		/**		 * double双精度浮点数		 */		public function readDouble():Number		{			return _body.readDouble();		}		/**		 * 32位整型		 */		public function readInt32():int		{			return _body.readInt();		}		/**		 * 64位整型		 */		public function readInt64():Number		{			return MessgeUtil.read64Int(_body);		}		/**		 * unsignedInt无符号整型		 */		public function readUnsignedInt():uint		{			return _body.readUnsignedInt();		}		/**		 * float单精度浮点型		 */		public function readFloat():Number		{			return _body.readFloat();		}		/**		 * byte一个字节128		 */		public function readByte():int		{			return _body.readByte();		}		/**		 * 一个无符号的byte，256		 */		public function readUnsignedByte():uint		{			return _body.readUnsignedByte();		}		/**		 * short一个短整型16位		 */		public function readShort():int		{			return _body.readShort();		}		/**		 * unsignedShort无符号短整型		 */		public function readUnsignedShort():uint		{			return _body.readUnsignedShort();		}		/**		 * bytes一个字节流		 */		public function readBytes(offset:uint = 0, length:uint = 0):ByteArray		{			var by:ByteArray = new ByteArray();			_body.readBytes(by, offset, length);			return by;		}		/**		 * string一个字符串		 */		public function readUTF():String		{			return _body.readUTF();		}		/**		 * char[]一个定长字串		 */		public function readChar(len:uint = 1):String		{			if (len <= 0)				return "";			return MessgeUtil.readCharsFromBytes(_body, len);		}		/**		 * @inheritDoc		 */		public function toString():String		{			var res:String = "";			res += "消息：" + msgId + "   " + "<br>";			if (_head != null)				res += "" + MessgeUtil.bytesToHex(_head, "Head") + "   <br>";			if (_body != null)				res += "" + MessgeUtil.bytesToHex(_body, "Body");			return res;		}	}}